<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NYSDY</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-16T13:42:42.671Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>NYSDY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用python3读写csv文档</title>
    <link href="http://yoursite.com/post/read%20the%20CSV%20document%20using%20python3/"/>
    <id>http://yoursite.com/post/read the CSV document using python3/</id>
    <published>2018-10-16T13:36:26.000Z</published>
    <updated>2018-10-16T13:42:42.671Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于大多数的CSV格式的数据读写问题，都可以使用 <code>csv</code> 库。</p></blockquote><a id="more"></a><p> 例如：假设你在一个名叫stocks.csv文件中有一些股票市场数据，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Symbol,Price,Date,Time,Change,Volume</span><br><span class="line">&quot;AA&quot;,39.48,&quot;6/11/2007&quot;,&quot;9:36am&quot;,-0.18,181800</span><br><span class="line">&quot;AIG&quot;,71.38,&quot;6/11/2007&quot;,&quot;9:36am&quot;,-0.15,195500</span><br><span class="line">&quot;AXP&quot;,62.58,&quot;6/11/2007&quot;,&quot;9:36am&quot;,-0.46,935000</span><br><span class="line">&quot;BA&quot;,98.31,&quot;6/11/2007&quot;,&quot;9:36am&quot;,+0.12,104800</span><br><span class="line">&quot;C&quot;,53.08,&quot;6/11/2007&quot;,&quot;9:36am&quot;,-0.25,360900</span><br><span class="line">&quot;CAT&quot;,78.29,&quot;6/11/2007&quot;,&quot;9:36am&quot;,-0.23,225400</span><br></pre></td></tr></table></figure><h1 id="csv文档的读取"><a href="#csv文档的读取" class="headerlink" title="csv文档的读取"></a>csv文档的读取</h1><h2 id="1-常规读取"><a href="#1-常规读取" class="headerlink" title="1. 常规读取"></a>1. 常规读取</h2><p>下面向你展示如何将这些数据读取为一个元组的序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.reader(f)</span><br><span class="line">    headers = next(f_csv)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">        <span class="comment"># Process row</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>在上面的代码中， <code>row</code> 会是一个列表。因此，为了访问某个字段，你需要使用下标，如 <code>row[0]</code>访问Symbol， <code>row[4]</code> 访问Change。==这样可以通过外建字典来存储读出的csv数据。==</p><h2 id="2-命名元组"><a href="#2-命名元组" class="headerlink" title="2. 命名元组"></a>2. 命名元组</h2><p>由于这种下标访问通常会引起混淆，你可以考虑使用==命名元组==。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.reader(f)</span><br><span class="line">    headings = next(f_csv)</span><br><span class="line">    Row = namedtuple(<span class="string">'Row'</span>, headings)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> f_csv:</span><br><span class="line">        row = Row(*r)</span><br><span class="line">        <span class="comment"># Process row</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>它允许你使用列名如 <code>row.Symbol</code> 和 <code>row.Change</code> 代替下标访问。 需要注意的是这个只有在列名是合法的Python标识符的时候才生效。如果不是的话， 你可能需要修改下原始的列名(如将非标识符字符替换成下划线之类的)。</p><h2 id="3-字典"><a href="#3-字典" class="headerlink" title="3. 字典"></a>3. 字典</h2><p>另外一个选择就是将数据读取到一个字典序列中去。可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">        <span class="comment"># process row</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>在这个版本中，你可以使用列名去访问每一行的数据了。比如，<code>row[&#39;Symbol&#39;]</code> 或者 <code>row[&#39;Change&#39;]</code>。</p><p><code>fieldnames</code> 是dict_reader的一个属性，表示CSV文档的数据名称。可以通过<code>f_csv.fieldnames</code>来访问数据名称那一行。</p><h1 id="CSV文件写入"><a href="#CSV文件写入" class="headerlink" title="CSV文件写入"></a>CSV文件写入</h1><p>为了写入CSV数据，你仍然可以使用csv模块，不过这时候先创建一个 <code>writer</code> 对象。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">headers = [<span class="string">'Symbol'</span>,<span class="string">'Price'</span>,<span class="string">'Date'</span>,<span class="string">'Time'</span>,<span class="string">'Change'</span>,<span class="string">'Volume'</span>]</span><br><span class="line">rows = [(<span class="string">'AA'</span>, <span class="number">39.48</span>, <span class="string">'6/11/2007'</span>, <span class="string">'9:36am'</span>, <span class="number">-0.18</span>, <span class="number">181800</span>),</span><br><span class="line">         (<span class="string">'AIG'</span>, <span class="number">71.38</span>, <span class="string">'6/11/2007'</span>, <span class="string">'9:36am'</span>, <span class="number">-0.15</span>, <span class="number">195500</span>),</span><br><span class="line">         (<span class="string">'AXP'</span>, <span class="number">62.58</span>, <span class="string">'6/11/2007'</span>, <span class="string">'9:36am'</span>, <span class="number">-0.46</span>, <span class="number">935000</span>),</span><br><span class="line">       ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.writer(f)</span><br><span class="line">    f_csv.writerow(headers)</span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure><p>如果你有一个字典序列的数据，可以像这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">headers = [<span class="string">'Symbol'</span>, <span class="string">'Price'</span>, <span class="string">'Date'</span>, <span class="string">'Time'</span>, <span class="string">'Change'</span>, <span class="string">'Volume'</span>]</span><br><span class="line">rows = [&#123;<span class="string">'Symbol'</span>:<span class="string">'AA'</span>, <span class="string">'Price'</span>:<span class="number">39.48</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line">        <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.18</span>, <span class="string">'Volume'</span>:<span class="number">181800</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'Symbol'</span>:<span class="string">'AIG'</span>, <span class="string">'Price'</span>: <span class="number">71.38</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line">        <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.15</span>, <span class="string">'Volume'</span>: <span class="number">195500</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'Symbol'</span>:<span class="string">'AXP'</span>, <span class="string">'Price'</span>: <span class="number">62.58</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line">        <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.46</span>, <span class="string">'Volume'</span>: <span class="number">935000</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.DictWriter(f, headers)</span><br><span class="line">    f_csv.writeheader()</span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure><p>其中<code>f_csv.writeheader()</code>也可以替换成<code>f_csv.writerow(dict(zip(headers, headers)))</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html" target="_blank" rel="noopener">https://python3-cookbook.readthedocs.io/zh_CN/latest/c06/p01_read_write_csv_data.html</a></li><li><a href="https://blog.csdn.net/guoziqing506/article/details/52014506" target="_blank" rel="noopener">https://blog.csdn.net/guoziqing506/article/details/52014506</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于大多数的CSV格式的数据读写问题，都可以使用 &lt;code&gt;csv&lt;/code&gt; 库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="文件读取" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
      <category term="csv" scheme="http://yoursite.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>Neo4j初始化节点显示设置</title>
    <link href="http://yoursite.com/post/Neo4j_initializes_the_node_display_Settings/"/>
    <id>http://yoursite.com/post/Neo4j_initializes_the_node_display_Settings/</id>
    <published>2018-10-10T08:13:05.000Z</published>
    <updated>2018-10-10T08:21:08.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>neo4j中有默认的初始化节点显示设置为300个节点，如果想要显示的节点多于300个，则会只显示300个，并给予以下提示语句：</p><p><code>Not all return nodes are being displayed due to Initial Node Display setting. Only 300 of 300 nodes are being displayed.</code></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在如图所示<code>initial Node Display</code>处可以修改，在此处修改为300000.<img src="https://i.loli.net/2018/10/10/5bbdb388a368b.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;neo4j中有默认的初始化节点显示设置为300个节点，如果想要显示的节点多于300个，则会只显示300个，并给予以下
      
    
    </summary>
    
      <category term="Neo4j" scheme="http://yoursite.com/categories/Neo4j/"/>
    
    
      <category term="Neo4j" scheme="http://yoursite.com/tags/Neo4j/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>《Bidirectional LSTM-CRF Models for Sequence Tagging》阅读笔记</title>
    <link href="http://yoursite.com/post/read_Bidirectional_LSTM-CRF_Models_for_Sequence_Tagging/"/>
    <id>http://yoursite.com/post/read_Bidirectional_LSTM-CRF_Models_for_Sequence_Tagging/</id>
    <published>2018-10-05T05:05:12.000Z</published>
    <updated>2018-10-05T05:11:42.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇论文可以作为一个RNN和LSTM学习的一个例子来看，有利于新手对LSTM的理解。对于NER的处理主要是作为一个序列标注问题。但是作为经典文章还是可以读一读了解一下的。</p></blockquote><a id="more"></a><p>在本篇论文中，作者提出了4种模型：LSTM、BI-LSTM、LSTM-CRF和BI-LSTM-CRF。</p><h2 id="contribution-贡献"><a href="#contribution-贡献" class="headerlink" title="contribution(贡献)"></a>contribution(贡献)</h2><ol><li>作者在NLP标注数据集上系统的对比了以上四个模型；</li><li>作者是首先提出把BI-LSTM-CRF模型用于NLP序列标注，并且达到了state-of-the-art的水平；</li><li>作者展示了BI-LSTM-CRF是robust，并且极少依赖于词向量。</li></ol><h2 id="model-模型"><a href="#model-模型" class="headerlink" title="model(模型)"></a>model(模型)</h2><h3 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h3><p>首先，作者先介绍了RNN的结构和工作原理，如图：<img src="https://i.loli.net/2018/10/04/5bb5a3e22e140.jpg" alt=""></p><p>其中输入为句子：EU rejects German call to boycott British lamb。输出为标签：B-ORG O B-MISC O O O B-MISC O O，其中B-，I-表示实体开始和中间位置。标签种类为：other (O)和四种实体标签：Person (PER), Location (LOC), Organization (ORG), and Miscellaneous (MISC).</p><p>输入层表示在时间步 t 的特征。它们可以是 one-hot-encoding 的词特征，稠密或者稀疏的向量特征。输入层与特征有相同大小的维度。输出层表示在时间步 t 的标签上的概率分布，维度与标注数量相同。相比前馈神经网络，RNN 引入前一个隐藏状态和当前隐藏状态的结合，因此可以储存历史信息。</p><p>涉及公式为：<img src="https://i.loli.net/2018/10/04/5bb5a556ad0ab.jpg" alt=""></p><p><img src="https://i.loli.net/2018/10/04/5bb5a57379fd7.jpg" alt=""></p><p>其中，U，W，V都是权重，函数f，g分别为sigmoid和softmax函数。  </p><p>接下来，作者展示了LSTM的结构和原理，如图：<img src="https://i.loli.net/2018/10/04/5bb5a61bdb483.jpg" alt=""></p><p>公式：<img src="https://i.loli.net/2018/10/04/5bb5a670e3b88.jpg" alt=""></p><p>其中，σ是逻辑sigmoid函数，i, f, o 和 c分别是输入门，忘记门，输出门和细胞向量，所有的大小都和向量h一样。w权重的含义如其下表所示。</p><p>LSTM序列标注模型如图所示：<img src="https://i.loli.net/2018/10/04/5bb5a84cd95d5.jpg" alt=""></p><p>其中，中间的画斜线的格子即为图2中所示部分。</p><h3 id="Bidirectional-LSTM-双向LSTM"><a href="#Bidirectional-LSTM-双向LSTM" class="headerlink" title="Bidirectional LSTM(双向LSTM)"></a>Bidirectional LSTM(双向LSTM)</h3><p>作者展示了双向LSTM的结构，如图所示：<img src="https://i.loli.net/2018/10/04/5bb5a8f44f16e.jpg" alt=""></p><p>双向LSTM网络可以有效利用过去特征和未来特征。在作者的实现中，对于整个句子的前向和后向操作，作者只需要在每个句子开始时将隐藏状态重置为0。作者采用批处理，使得可以同时处理多个句子。</p><h3 id="CRF"><a href="#CRF" class="headerlink" title="CRF"></a>CRF</h3><p>使用邻居标记信息预测当前标记有两种不同的方法：</p><ol><li>预测每个时间步长的标签分布，然后使用波束式解码来找到最优的标签序列，代表方法：MEMMs</li><li>注重句子层次而不是个体位置，代表方法：CRF，输入和输出是直接相连的；如图：<img src="https://i.loli.net/2018/10/04/5bb5ac191d2dd.jpg" alt=""></li></ol><p>研究表明，CRFs一般能够产生更高的标签精度。</p><h3 id="LSTM-CRF"><a href="#LSTM-CRF" class="headerlink" title="LSTM-CRF"></a>LSTM-CRF</h3><p>作者展示了LSTM-CRF的结构，如图：<img src="https://i.loli.net/2018/10/04/5bb5ad05ebec0.jpg" alt=""></p><p>这网络可以有效地通过 LSTM 利用过去的输入特征和通过 CRF 利用句子级的标注信息。图中CRF层由连接连续输出层的线表示。CRF层有一个状态转移矩阵作为参数。</p><p>公式为：<img src="https://i.loli.net/2018/10/04/5bb5b6ea7f87e.jpg" alt=""></p><p>函数f为网络的输出分数，[x]为输入， [fθ]i,t 为带有参数θ（句子x，第i 个标签，第t个单词）的网络输出；</p><p>[A]i,j为转移分数，从连续的时间步i状态到j状态的转移分数。注意，该转换矩阵是位置无关的。</p><h3 id="BI-LSTM-CRF"><a href="#BI-LSTM-CRF" class="headerlink" title="BI-LSTM-CRF"></a>BI-LSTM-CRF</h3><p>作者展示了BI-LSTM-CRF的结构，如图所示：<img src="https://i.loli.net/2018/10/04/5bb5b87ca950f.jpg" alt=""></p><p>作者在实验中展示了额外的未来特征可以提高标签的准确率。</p><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><p>本文使用的所有模型都共享一个通用SGD前向和后向训练过程。作者展示了BI-LSTM-CRF的算法，如图<img src="https://i.loli.net/2018/10/04/5bb5ba7ce18c7.jpg" alt=""></p><p>作者设置了批次大小为100。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>作者在以下三个数据集上测试自己的模型：Penn TreeBank (PTB) POS tagging, CoNLL 2000 chunking, and CoNLL 2003 named entity tagging.数据集信息展示如下：<img src="https://i.loli.net/2018/10/04/5bb5bc263ec9f.jpg" alt=""></p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>作者从三个数据集中提取出其公共特征。特征可以分为拼写特征和上下文特征。最终，作者对于POS（词性标注）、chunking（组块）和NER（命名实体识别）分别提取401K，76K和341K个特征。</p><h3 id="spelling-features（拼写特征）"><a href="#spelling-features（拼写特征）" class="headerlink" title="spelling features（拼写特征）"></a>spelling features（拼写特征）</h3><p>除了小写字母特征之外，我们提取给定单词的以下特征。</p><p><img src="https://i.loli.net/2018/10/04/5bb5bdde879c9.jpg" alt=""></p><h3 id="context-featurs（上下文特征）"><a href="#context-featurs（上下文特征）" class="headerlink" title="context featurs（上下文特征）"></a>context featurs（上下文特征）</h3><p>对于单词特征，作者使用unigram和bi-grams特征。对于在CoNLL2000数据集中的POS特征和在CoNLL2003数据集中的 POS &amp; CHUNK特征，作者使用了unigram，bi-gram和tri-gram特征。</p><h3 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h3><p>词向量在改进序列标注任务的表现方面起着至关重要的作用，我们使用 130K 词汇并且每个词汇的词向量维度是 50 维。我们将 one-hot-encoding词表示替换每个词对应的词向量。</p><h3 id="Features-connection-tricks"><a href="#Features-connection-tricks" class="headerlink" title="Features connection tricks"></a>Features connection tricks</h3><p>我们可以将拼写和上下文特征与单词特征一样对待。这样网络的输入包括单词，单词的拼写和上下文特征。然而，==我们发现将拼写和上下文特征与输出直接连接可以加速训练过程，同时也能保持标注的准确率，==如下图所示：<img src="https://i.loli.net/2018/10/04/5bb5bfc63f961.jpg" alt=""></p><p>我们注意到，这种特征的使用与使用的最大熵特征类似。区别在于采用特征三列技术可能会发生特征冲突。由于序列标注数据集中的输出标签小于语言模型（通常为数十万），所以我们可以在特征和输出之间建立完整的连接，以避免潜在的特征冲突。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>在相同的数据集上分别训练LSTM，BI-LSTM，CRF，LSTM-CRF和BI-LSTM-CRF模型，并且采用两种方式初始化word embedding：随机和Senna方式。模型的训练速率为0.1，隐藏层数量为300.不同模型在不同word embedding下的结果如表2所示，同时列出了之前最好模型Cov-CRF。</p><p><img src="https://i.loli.net/2018/10/04/5bb5c1da95e97.jpg" alt=""></p><ul><li><p>与Cov-CRF比较</p><p>实验中设置了3个基准模型，分别为LSTM、BI-LSTM和CRF，结果中LSTM在三个数据集中效果最差，BI-LSTM跟CRF在POS和chunking中效果接近，但是在NER中后者要优于前者。有趣的是表现最好的模型BI-LSTM-CRF相对于Cov-CRF来说对Senna embedding的依赖程度更小。</p></li><li><p>(robustness)模型鲁棒性  </p><p>为验证模型的鲁棒性，对不同模型只采用word feature特征进行训练，训练结果如表3，括号中数字表示相比于全部特征，模型的结果下降数值。<img src="https://i.loli.net/2018/10/05/5bb6ee3958635.jpg" alt=""></p></li><li><p>与其他系统的比较</p><p>这里就不贴图了，总之就是阐述作者自己模型好。</p></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>总之作者的模型是基于之前模型的一些改进，主要运用了IBI-LSTM和CRF的结合。</p><h3 id="论文下载地址"><a href="#论文下载地址" class="headerlink" title="论文下载地址"></a><a href="https://arxiv.org/pdf/1508.01991.pdf" target="_blank" rel="noopener">论文下载地址</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇论文可以作为一个RNN和LSTM学习的一个例子来看，有利于新手对LSTM的理解。对于NER的处理主要是作为一个序列标注问题。但是作为经典文章还是可以读一读了解一下的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="阅读笔记" scheme="http://yoursite.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="LSTM" scheme="http://yoursite.com/tags/LSTM/"/>
    
      <category term="NER" scheme="http://yoursite.com/tags/NER/"/>
    
      <category term="BI-LSTM" scheme="http://yoursite.com/tags/BI-LSTM/"/>
    
  </entry>
  
  <entry>
    <title>CN-DBpedia A Never-Ending Chinese Knowledge Extraction SystemCN-DBpedia System</title>
    <link href="http://yoursite.com/post/essay/"/>
    <id>http://yoursite.com/post/essay/</id>
    <published>2018-10-01T14:27:25.000Z</published>
    <updated>2018-10-02T07:14:02.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本篇论文为2016年的一篇论文，主要介绍了作者构建中文知识图谱所遇到的一些问题和解决方法。</p></blockquote><a id="more"></a><h3 id="challenge"><a href="#challenge" class="headerlink" title="challenge"></a>challenge</h3><ol><li>如何降低人力成本？</li><li>如何保持知识库的新鲜度？</li></ol><h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><ol><li>在构建中文知识库中降低了人力成本：<ul><li>重复利用已经存在的本体论</li><li>提出了一个不用人工监督的端到端的深度学习模型</li></ul></li><li>提出了一个智能主动更新策略</li></ol><h3 id="系统结构"><a href="#系统结构" class="headerlink" title="系统结构"></a>系统结构</h3><p><img src="https://i.loli.net/2018/09/26/5baaf081b2644.jpg" alt=""></p><p>提高知识库质量：</p><ol><li><strong>Normalization</strong>： normalize the attributes and values</li><li><strong>Enrichment</strong>：reuse the ontology</li><li><strong>Correction</strong>：two steps<ol><li>error detection:<ul><li>rule-based detection</li><li>based on user feedbacks</li></ul></li><li>error correction<ul><li>crowd-sourcing</li></ul></li></ol></li></ol><h3 id="降低人力成本"><a href="#降低人力成本" class="headerlink" title="降低人力成本"></a>降低人力成本</h3><p>这部分作者采用了两种方法：</p><ol><li>重复利用已经存在在知识库的本体论和类型化的中文实体</li><li>构建一个端到端提取器</li></ol><h4 id="Cross-Lingual-Entity-Typing（跨语言的实体类型）"><a href="#Cross-Lingual-Entity-Typing（跨语言的实体类型）" class="headerlink" title="Cross-Lingual Entity Typing（跨语言的实体类型）"></a>Cross-Lingual Entity Typing（跨语言的实体类型）</h4><ul><li>第一步是通过用英文DBpedia类型来类型化中文实体。为了达到这个目的，作者提出了如下系统：<img src="https://i.loli.net/2018/10/01/5bb2273b35ab0.jpg" alt="">系统建立了监督层次分类模型，系统输入为没有标记类型的中文实体，输出为在DB中所有有效的英文类型。作者将中文实体与共享相同中文标签名称的英语实体配对，这样中文实体以及配对英语实体的类型自然是标记样本。</li><li>用上述方法得到的训练集可能出现下面一些问题：<ul><li>英文DBpedia实体类型在许多情况下可能不完全；</li><li>英文DBpedia实体类型在许多情况下可能是错误的；</li><li>中英文链接可能出错；</li><li>中文实体的特征通常不完整。</li></ul></li><li>为了解决以上问题，作者提出了两种方法：<ul><li>完善英文DBpedia实体类型；</li><li>设计一个过滤步骤来剔除错误样本。</li></ul></li></ul><h4 id="infobox-completion"><a href="#infobox-completion" class="headerlink" title="infobox completion"></a>infobox completion</h4><blockquote><p>Infobox completion is a task to extract object for a given pair of entity and predicate from encyclopedia articles.</p></blockquote><p>作者建模了一个seq2seq模型，输入为包含tokens的自然语言句子，输出为每个token的标签。对于标签为0或1。</p><p>对于建立一个有效的提取器有以下两个关键：</p><ol><li>如何构建训练集：作者采用远程监督方法（利用Wikipedia）</li><li>如何选取期望的提取模型：LSTM-RNN，如图所示<img src="https://i.loli.net/2018/10/01/5bb22b72af582.jpg" alt=""></li></ol><h3 id="知识库更新"><a href="#知识库更新" class="headerlink" title="知识库更新"></a>知识库更新</h3><p>作者采用动态更新：识别新实体或可能包含新事实的旧实体</p><p>作者根据以下两方面来辨别这些实体：</p><ul><li>近期热点新闻中提及的实体</li><li>在搜索引擎的流行搜索关键字或其他流行网页中提到的实体</li></ul><p>对于如何从新闻标题和搜素指令中提取实体名字，作者采用简单的词分割方法，从百科全书中判断其是否为实体，并提出IDF值低的分割子串。</p><h3 id="统计数据"><a href="#统计数据" class="headerlink" title="统计数据"></a>统计数据</h3><p><img src="https://i.loli.net/2018/10/01/5bb22d57ab3ec.jpg" alt=""></p><h3 id="论文下载链接"><a href="#论文下载链接" class="headerlink" title="论文下载链接"></a><a href="https://www.researchgate.net/publication/318144300_CN-DBpedia_A_Never-Ending_Chinese_Knowledge_Extraction_System" target="_blank" rel="noopener">论文下载链接</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇论文为2016年的一篇论文，主要介绍了作者构建中文知识图谱所遇到的一些问题和解决方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="论文阅读笔记" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="知识图谱" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="RNN" scheme="http://yoursite.com/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>Ontology reasoning with deep neural networks</title>
    <link href="http://yoursite.com/post/essay/"/>
    <id>http://yoursite.com/post/essay/</id>
    <published>2018-09-29T08:29:49.000Z</published>
    <updated>2018-10-02T07:13:58.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ontology-reasoning-with-deep-neural-networks（基于深度神经网络的本体推理）"><a href="#Ontology-reasoning-with-deep-neural-networks（基于深度神经网络的本体推理）" class="headerlink" title="Ontology reasoning with deep neural networks（基于深度神经网络的本体推理）"></a>Ontology reasoning with deep neural networks（基于深度神经网络的本体推理）</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本论文属于知识图谱的下游任务，也就是知识图谱的应用的一个例子。这篇论文的方法根据作者描述RRN是第一个基于深度学习的全面本体推理方法。</p></blockquote><a id="more"></a><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>获得一个可以在不同的场景进行有效推理的模</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>基于机器学习的推理文章通常假设了一个特定的应用案例：自然语言或视觉输入的推理。<br>作者采用一个不同的方法：将正式的推理问题作为起点。<br>对于特定的问题选择：选择一种在表现力与另一方面复杂性之间取得适当平衡的方法通常是明智的。<br>OWL RL<br>本体推理是指一种常见的场景，在这种场景中，用于推理的推理规则（在此上下文中称为本体）与我们寻求推理的事实信息一起指定。  </p><p>本体推理是一种非常灵活的工具，它允许对大量不同的场景进行建模，因此满足了我们对适用于各种应用的系统的需求。<br>==首先引出了什么是本质推理，然后进一步阐述为什么要用机器学习==</p><p>今天用于推理的大多数KRR形式都植根于符号逻辑,这些方法在实践中会遇到许多问题：例如处理不完整，冲突或不确定数据的困难<br>机器学习模型通常具有高度可扩展性，更能抵抗数据中的干扰，并且即使所提供的形式是错误的也能够提供预测。</p><p><strong>作者的目标是通过采用尖端的深度学习技术，目标是在近似于形式方法的高度期望（理论）属性和另一方面利用机器学习的稳健性之间管理平衡行为。</strong>  </p><p>对于用于推理的知识图谱：作者采用的是由个体、类和二元关系组成的信息构成，其中个体对应于顶点，关系对应于被标记的有向边缘，类对应于二进制顶点标签。关系是主体和客体之间的关系或者个人和类之间的关系。这与关系学习不同：在关系学习的背景下，知识图通常通过将类视为个人以及将成员视为普通关系来简化。然而，就作者的目的而言，明确区分类和关系是很重要的，因为在用于推理的知识图谱中类和关系可能不同。  </p><h3 id="模型总览"><a href="#模型总览" class="headerlink" title="模型总览"></a>模型总览</h3><p><img src="https://i.loli.net/2018/09/04/5b8e474079995.jpg" alt=""><br>整个模型是以RRN为基础进行构建的，每个RRN都针对特定的本体进行训练。当训练模型应用于一组特定的事实时，它分为如下两个步骤：</p><ol><li>它为所有的步骤生成矢量表示，也就是嵌入在所考虑数据中出现的个体。</li><li>它仅基于这些生成向量计算查询预测</li></ol><p>在图中，</p><ul><li>a中它考虑一个事实三元组，并根据数据集重复多次。</li><li>b中它每读取一个事实就获取三元组中的个体潜入，并将他们的反馈送入更新层，该层产生已提供的嵌入的更新版本，然后将其存储在前一个版本的位置。 </li><li>c中从随机生成的向量开始，逐步更新嵌入，以便对关于它们所代表的个体的事实和推论进行编码。</li></ul><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>作者在四个不同的数据集上训练和评估了RRN，其中两个是人工生成的玩具数据集，两个是从现实世界的数据库中提取的。这样做的原因：</p><ol><li>玩具问题具有很大的优势，即很明显某些推论是多么困难，从而为我们提供了对模型能力的相当好的印象。</li><li>在现实环境中评估方法当然是性能不可或缺的衡量标准</li></ol><p>作者为了评估真实世界数据的RRN模型，还从从两个著名的知识库DBpedia和Claros中提取了数据集。</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://i.loli.net/2018/09/04/5b8e6d1edbfdc.jpg" alt=""></p><ol><li>RRN能够有效地编码提供的关于类和关系的事实</li><li>对于关系的推理，可以看到DBpedia的准确度略低于98.9％，而其他数据集中的可导出关系在所有情况中至少99.6％被正确预测。</li><li>可以预测该模型在预测可推断类别方面比在关系方面表现更好，因为大多数这些都是仅依赖于单个三元组的推论。  </li></ol><p>为了评估作者提出的KRR方法常常遇到的问题，作者进行了如下实验：</p><ol><li>对于缺少信息的问题，作者随机删除了一个无法通过每个样本的符号推理推断出的事实，并检查模型是否能够正确地重建它。结果：对于DBpedia来说，33.8％的失踪三元组就是这种情况，而对于Claros来说，38.4％被正确预测</li><li>对于冲突的问题，作者通过在每个测试样本中随机选择一个事实来测试模型解决冲突的能力，并添加相同的否定版本作为另一个事实。对于DBpedia，RRN正确解决了88.4％的引入冲突，而对于Claros，它甚至达到了96.2％。然而，最重要的是，对于任何一个损坏的数据集，之前报告的总精度都没有下降超过0.9。</li></ol><p>所有RRN的查询预测都完全基于它为各个数据集中的个体生成的嵌入，这就是为什么仔细研究这样一组嵌入向量是有益的。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>本论文属于知识图谱的下游任务，也就是知识图谱的应用的一个例子。这篇论文的方法根据作者描述RRN是第一个基于深度学习的全面本体推理方法。但是具体的操作方法论文中写的比较清晰，感觉自己是理解了。重点就是对于个体的嵌入表示，如果类比的话就是词向量，作者通过不断的处理更新这个词向量，最后通过所获的词向量进行推理。并且从这篇文章中可以看到作者使用的知识图谱和我之前在弄的关系三元组有所区别。</p><h3 id="论文下载链接"><a href="#论文下载链接" class="headerlink" title="论文下载链接"></a><a href="https://arxiv.org/abs/1808.07980" target="_blank" rel="noopener">论文下载链接</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ontology-reasoning-with-deep-neural-networks（基于深度神经网络的本体推理）&quot;&gt;&lt;a href=&quot;#Ontology-reasoning-with-deep-neural-networks（基于深度神经网络的本体推理）&quot; class=&quot;headerlink&quot; title=&quot;Ontology reasoning with deep neural networks（基于深度神经网络的本体推理）&quot;&gt;&lt;/a&gt;Ontology reasoning with deep neural networks（基于深度神经网络的本体推理）&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本论文属于知识图谱的下游任务，也就是知识图谱的应用的一个例子。这篇论文的方法根据作者描述RRN是第一个基于深度学习的全面本体推理方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="论文阅读笔记" scheme="http://yoursite.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="知识图谱" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Ontology" scheme="http://yoursite.com/tags/Ontology/"/>
    
  </entry>
  
  <entry>
    <title>初次见面，你好NYSDY！</title>
    <link href="http://yoursite.com/post/essay/"/>
    <id>http://yoursite.com/post/essay/</id>
    <published>2018-09-21T02:35:47.000Z</published>
    <updated>2018-09-24T16:03:43.310Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
